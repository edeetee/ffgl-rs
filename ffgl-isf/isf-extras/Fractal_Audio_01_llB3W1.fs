/*
{
    "CATEGORIES": [
        "Automatically Converted",
        "Shadertoy"
    ],
    "DESCRIPTION": "Automatically converted from https://www.shadertoy.com/view/llB3W1 by relampago2048.  This shader is a render of the Julia Set, generated by audio input from microphone.",
    "IMPORTED": {
    },
    "INPUTS": [
        {
            "NAME": "iMouse",
            "TYPE": "point2D"
        },
        {
            "NAME": "iChannel0",
            "TYPE": "audio"
        }
    ]
}

*/


const int iters = 150;

int fractal(vec2 p, vec2 point) {
	vec2 so = (-1.0 + 2.0 * point) * 0.4;
	vec2 seed = vec2(0.098386255 + so.x, 0.6387662 + so.y);
	
	for (int i = 0; i < iters; i++) {
		
		if (length(p) > 2.0) {
			return i;
		}
		vec2 r = p;
		p = vec2(p.x * p.x - p.y * p.y, 2.0* p.x * p.y);
		p = vec2(p.x * r.x - p.y * r.y + seed.x, r.x * p.y + p.x * r.y + seed.y);
	}
	
	return 0;	
}

vec3 color(int i) {
	float f = float(i)/float(iters) * 2.0;
	f=f*f*2.;
	return vec3((sin(f*2.0)), (sin(f*3.0)), abs(sin(f*7.0)));
}


float sampleMusicA() {
	return 0.5 * (
		IMG_NORM_PIXEL(iChannel0,mod(vec2( 0.15, 0.25 ),1.0)).x + 
		IMG_NORM_PIXEL(iChannel0,mod(vec2( 0.30, 0.25 ),1.0)).x);
}

void main() {

	vec2 uv = gl_FragCoord.xy / RENDERSIZE.xy;
    vec2 mouse = vec2(iMouse.x/RENDERSIZE.x,iMouse.y/RENDERSIZE.y);
    
    vec2 position = 3. * (-0.5 + gl_FragCoord.xy / RENDERSIZE.xy );
	position.x *= RENDERSIZE.x/RENDERSIZE.y;
    
    vec2 iFC = vec2(RENDERSIZE.x-gl_FragCoord.x,RENDERSIZE.y-gl_FragCoord.y);    
    vec2 pos2 = 2. * (-0.5 + iFC.xy / RENDERSIZE.xy);
    pos2.x*=RENDERSIZE.x/RENDERSIZE.y;
    
    vec4 t3 = IMG_NORM_PIXEL(iChannel0,mod(vec2(length(position)/2.0,0.1),1.0));
    float pulse = 0.5+sampleMusicA()*1.8;
    vec3 invFract = color(fractal(pos2,vec2(0.55+sin(TIME/3.+0.5)/2.0,pulse*.9)));
    
    vec3 fract4 = color(fractal(position/1.6,vec2(0.6+cos(TIME/2.+0.5)/2.0,pulse*.8)));
    vec3 c = color(fractal(position,vec2(0.5+sin(TIME/3.)/2.0,pulse)));
    
    t3=abs(vec4(0.5,0.1,0.5,1.)-t3)*2.;
    
    vec4 fract01 =  vec4( c , 1.0 );
    vec4 salida;
    salida = fract01 + fract01 + vec4(invFract,0.6) + vec4(fract4,0.3);
	gl_FragColor = salida;
}
